"""
Generates HTTPCommonHeaders.(h|gperf|cpp) from HTTPCommonHeaders.txt
"""
import os
import subprocess

fbcode_dir = os.path.abspath(os.environ.get('FBCODE_DIR', ''))
install_dir = os.path.abspath(os.environ.get('INSTALL_DIR', ''))


def generate_file(template, content, substr='%%%%%'):
    """
    Substitue the content into a template wherever substr occurs. 
    The generated output file is named the same as the input template 
    with '.template' removed.
    """
    outpath = template.replace('.template', '')
    print("Generating file {0} from template {1}".format(outpath, template))
    with open(template, 'r') as tf:
        template_content = tf.read()

    outcontent = template_content.replace(substr, content)
    with open(outpath, 'w') as of:
        of.write(outcontent)


# Collect the headers from HTTPCommonHeaders.txt
headers_file = os.path.join(install_dir, 'HTTPCommonHeaders.txt')
with open(headers_file, 'r') as hf:
    lines = hf.readlines()

headers = []
for line in lines:
    header = line.strip()
    if header:
        headers.append(header)

formatted_enums = ["HTTP_HEADER_" + h.replace('-', '_').upper() for h in headers]

header_content = ",\n".join(["  " + enum for enum in formatted_enums])
gperf_content = "\n".join(['{0}, {1}'.format(headers[i], formatted_enums[i]) for i in xrange(len(formatted_enums))])

gperf_content = '%%\n' + gperf_content + '\n%%\n'


# Substitute the headers into the templates and generate new files

template_h = 'HTTPCommonHeaders.template.h'
template_gperf = 'HTTPCommonHeaders.template.gperf'

generate_file(template_h, header_content)
generate_file(template_gperf, gperf_content)


# generate the cpp file using gperf
cpp_file = 'HTTPCommonHeaders.cpp'
gper_file = 'HTTPCommonHeaders.gperf' # generated by one of our templates
gperf_cmd = ['gperf', gper_file, '-m', '5', '--output-file={0}'.format(cpp_file)]

print(" ".join(gperf_cmd) )
subprocess.call(gperf_cmd)

